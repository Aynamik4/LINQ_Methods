* Aggregate<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func);
* All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
* Any<TSource>(this IEnumerable<TSource> source);
* AsEnumerable<TSource>(this IEnumerable<TSource> source);
* Average(this IEnumerable<float> source);
* Cast<TResult>(this IEnumerable source);
* Concat<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second);
* Contains<TSource>(this IEnumerable<TSource> source, TSource value);
* Count<TSource>(this IEnumerable<TSource> source);
* DefaultIfEmpty<TSource>(this IEnumerable<TSource> source);
* Distinct<TSource>(this IEnumerable<TSource> source);
* ElementAt<TSource>(this IEnumerable<TSource> source, int index);
* ElementAtOrDefault<TSource>(this IEnumerable<TSource> source, int index);
* Empty<TResult>();
* Except<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second);
* First<TSource>(this IEnumerable<TSource> source);
* FirstOrDefault<TSource>(this IEnumerable<TSource> source);
* GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector);
* Intersect<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second);
* Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector);
* Last<TSource>(this IEnumerable<TSource> source);
* LastOrDefault<TSource>(this IEnumerable<TSource> source);
* LongCount<TSource>(this IEnumerable<TSource> source);
* Max(this IEnumerable<double?> source);
* Min(this IEnumerable<long?> source);
* OfType<TResult>(this IEnumerable source);
* OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* Range(int start, int count);
* Repeat<TResult>(TResult element, int count);
* Reverse<TSource>(this IEnumerable<TSource> source);
* Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
* SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector);
* SequenceEqual<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second);
* Single<TSource>(this IEnumerable<TSource> source);
* SingleOrDefault<TSource>(this IEnumerable<TSource> source);
* Skip<TSource>(this IEnumerable<TSource> source, int count);
* SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
* Sum(this IEnumerable<int> source);
* Take<TSource>(this IEnumerable<TSource> source, int count);
* TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector);
ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* ToArray<TSource>(this IEnumerable<TSource> source);
* ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* ToList<TSource>(this IEnumerable<TSource> source);
* ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
* Union<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second);
* Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate);
* Zip<TFirst, TSecond, TResult>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector);